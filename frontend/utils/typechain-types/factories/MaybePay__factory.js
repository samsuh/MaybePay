/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { utils, Contract, ContractFactory } from "ethers";
const _abi = [
    {
        inputs: [],
        stateMutability: "nonpayable",
        type: "constructor",
    },
    {
        inputs: [
            {
                internalType: "address",
                name: "",
                type: "address",
            },
        ],
        name: "balances",
        outputs: [
            {
                internalType: "uint256",
                name: "",
                type: "uint256",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "uint256",
                name: "amount",
                type: "uint256",
            },
            {
                internalType: "address",
                name: "consumer",
                type: "address",
            },
            {
                internalType: "uint256",
                name: "serverSecret",
                type: "uint256",
            },
            {
                internalType: "uint256",
                name: "consumerMixer",
                type: "uint256",
            },
            {
                internalType: "uint256",
                name: "threshold",
                type: "uint256",
            },
            {
                components: [
                    {
                        internalType: "bytes32",
                        name: "r",
                        type: "bytes32",
                    },
                    {
                        internalType: "bytes32",
                        name: "s",
                        type: "bytes32",
                    },
                    {
                        internalType: "uint8",
                        name: "v",
                        type: "uint8",
                    },
                ],
                internalType: "struct Signature",
                name: "consumerSignature",
                type: "tuple",
            },
        ],
        name: "claim",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "bytes32",
                name: "",
                type: "bytes32",
            },
        ],
        name: "claimsProcessed",
        outputs: [
            {
                internalType: "bool",
                name: "",
                type: "bool",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "address",
                name: "signer",
                type: "address",
            },
            {
                internalType: "bytes32",
                name: "messageHash",
                type: "bytes32",
            },
            {
                components: [
                    {
                        internalType: "bytes32",
                        name: "r",
                        type: "bytes32",
                    },
                    {
                        internalType: "bytes32",
                        name: "s",
                        type: "bytes32",
                    },
                    {
                        internalType: "uint8",
                        name: "v",
                        type: "uint8",
                    },
                ],
                internalType: "struct Signature",
                name: "signature",
                type: "tuple",
            },
        ],
        name: "verifySignature",
        outputs: [
            {
                internalType: "bool",
                name: "",
                type: "bool",
            },
        ],
        stateMutability: "pure",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "uint256",
                name: "amount",
                type: "uint256",
            },
        ],
        name: "withdraw",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function",
    },
    {
        stateMutability: "payable",
        type: "receive",
    },
];
const _bytecode = "0x608060405234801561001057600080fd5b50610eaa806100206000396000f3fe60806040526004361061004e5760003560e01c80630bd9d0f5146100af57806327e235e3146100ec5780632e1a7d4d14610129578063d702237414610152578063e697fbf91461018f576100aa565b366100aa57346000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546100a19190610693565b92505081905550005b600080fd5b3480156100bb57600080fd5b506100d660048036038101906100d191906107a6565b6101b8565b6040516100e39190610814565b60405180910390f35b3480156100f857600080fd5b50610113600480360381019061010e919061082f565b61028b565b604051610120919061086b565b60405180910390f35b34801561013557600080fd5b50610150600480360381019061014b91906108b2565b6102a3565b005b34801561015e57600080fd5b50610179600480360381019061017491906108df565b61038d565b6040516101869190610814565b60405180910390f35b34801561019b57600080fd5b506101b660048036038101906101b1919061090c565b6103ad565b005b600080836040516020016101cc9190610a12565b60405160208183030381529060405280519060200120905060006001828560400160208101906101fc9190610a71565b86600001358760200135604051600081526020016040526040516102239493929190610abc565b6020604051602081039080840390855afa158015610245573d6000803e3d6000fd5b5050506020604051035190508573ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614925050509392505050565b60006020528060005260406000206000915090505481565b806000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410156102ee57600080fd5b806000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461033c9190610b01565b925050819055503373ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f19350505050158015610389573d6000803e3d6000fd5b5050565b60016020528060005260406000206000915054906101000a900460ff1681565b600046308833886040516020016103c49190610b56565b6040516020818303038152906040528051906020012088886040516020016103f29796959493929190610c32565b6040516020818303038152906040528051906020012090506104158682846101b8565b610454576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161044b90610d10565b60405180910390fd5b8284866104619190610693565b11156104a2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161049990610d7c565b60405180910390fd5b600015156001600083815260200190815260200160002060009054906101000a900460ff16151514610509576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161050090610de8565b60405180910390fd5b600180600083815260200190815260200160002060006101000a81548160ff021916908315150217905550866000808873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410156105b5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105ac90610e54565b60405180910390fd5b866000808873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546106039190610b01565b925050819055503373ffffffffffffffffffffffffffffffffffffffff166108fc889081150290604051600060405180830381858888f19350505050158015610650573d6000803e3d6000fd5b5050505050505050565b6000819050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061069e8261065a565b91506106a98361065a565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156106de576106dd610664565b5b828201905092915050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610719826106ee565b9050919050565b6107298161070e565b811461073457600080fd5b50565b60008135905061074681610720565b92915050565b6000819050919050565b61075f8161074c565b811461076a57600080fd5b50565b60008135905061077c81610756565b92915050565b600080fd5b60006060828403121561079d5761079c610782565b5b81905092915050565b600080600060a084860312156107bf576107be6106e9565b5b60006107cd86828701610737565b93505060206107de8682870161076d565b92505060406107ef86828701610787565b9150509250925092565b60008115159050919050565b61080e816107f9565b82525050565b60006020820190506108296000830184610805565b92915050565b600060208284031215610845576108446106e9565b5b600061085384828501610737565b91505092915050565b6108658161065a565b82525050565b6000602082019050610880600083018461085c565b92915050565b61088f8161065a565b811461089a57600080fd5b50565b6000813590506108ac81610886565b92915050565b6000602082840312156108c8576108c76106e9565b5b60006108d68482850161089d565b91505092915050565b6000602082840312156108f5576108f46106e9565b5b60006109038482850161076d565b91505092915050565b600080600080600080610100878903121561092a576109296106e9565b5b600061093889828a0161089d565b965050602061094989828a01610737565b955050604061095a89828a0161089d565b945050606061096b89828a0161089d565b935050608061097c89828a0161089d565b92505060a061098d89828a01610787565b9150509295509295509295565b600081905092915050565b7f19457468657265756d205369676e6564204d6573736167653a0a333200000000600082015250565b60006109db601c8361099a565b91506109e6826109a5565b601c82019050919050565b6000819050919050565b610a0c610a078261074c565b6109f1565b82525050565b6000610a1d826109ce565b9150610a2982846109fb565b60208201915081905092915050565b600060ff82169050919050565b610a4e81610a38565b8114610a5957600080fd5b50565b600081359050610a6b81610a45565b92915050565b600060208284031215610a8757610a866106e9565b5b6000610a9584828501610a5c565b91505092915050565b610aa78161074c565b82525050565b610ab681610a38565b82525050565b6000608082019050610ad16000830187610a9e565b610ade6020830186610aad565b610aeb6040830185610a9e565b610af86060830184610a9e565b95945050505050565b6000610b0c8261065a565b9150610b178361065a565b925082821015610b2a57610b29610664565b5b828203905092915050565b6000819050919050565b610b50610b4b8261065a565b610b35565b82525050565b6000610b628284610b3f565b60208201915081905092915050565b6000819050919050565b6000610b96610b91610b8c846106ee565b610b71565b6106ee565b9050919050565b6000610ba882610b7b565b9050919050565b6000610bba82610b9d565b9050919050565b60008160601b9050919050565b6000610bd982610bc1565b9050919050565b6000610beb82610bce565b9050919050565b610c03610bfe82610baf565b610be0565b82525050565b6000610c1482610bce565b9050919050565b610c2c610c278261070e565b610c09565b82525050565b6000610c3e828a610b3f565b602082019150610c4e8289610bf2565b601482019150610c5e8288610b3f565b602082019150610c6e8287610c1b565b601482019150610c7e82866109fb565b602082019150610c8e8285610b3f565b602082019150610c9e8284610b3f565b60208201915081905098975050505050505050565b600082825260208201905092915050565b7f5369676e617475726520766572696669636174696f6e206661696c6564000000600082015250565b6000610cfa601d83610cb3565b9150610d0582610cc4565b602082019050919050565b60006020820190508181036000830152610d2981610ced565b9050919050565b7f5468726573686f6c64206e6f7420736174697366696564000000000000000000600082015250565b6000610d66601783610cb3565b9150610d7182610d30565b602082019050919050565b60006020820190508181036000830152610d9581610d59565b9050919050565b7f436c61696d2068617320616c7265616479206265656e2070726f636573736564600082015250565b6000610dd2602083610cb3565b9150610ddd82610d9c565b602082019050919050565b60006020820190508181036000830152610e0181610dc5565b9050919050565b7f436f6e73756d657220696e73756666696369656e742066756e64730000000000600082015250565b6000610e3e601b83610cb3565b9150610e4982610e08565b602082019050919050565b60006020820190508181036000830152610e6d81610e31565b905091905056fea2646970667358221220a070d3a94ae3cc0cd9b94863266cd4a2052c16562d197d3fa6702e4a9bf3ce4d64736f6c63430008090033";
const isSuperArgs = (xs) => xs.length > 1;
export class MaybePay__factory extends ContractFactory {
    constructor(...args) {
        if (isSuperArgs(args)) {
            super(...args);
        }
        else {
            super(_abi, _bytecode, args[0]);
        }
    }
    deploy(overrides) {
        return super.deploy(overrides || {});
    }
    getDeployTransaction(overrides) {
        return super.getDeployTransaction(overrides || {});
    }
    attach(address) {
        return super.attach(address);
    }
    connect(signer) {
        return super.connect(signer);
    }
    static createInterface() {
        return new utils.Interface(_abi);
    }
    static connect(address, signerOrProvider) {
        return new Contract(address, _abi, signerOrProvider);
    }
}
MaybePay__factory.bytecode = _bytecode;
MaybePay__factory.abi = _abi;
